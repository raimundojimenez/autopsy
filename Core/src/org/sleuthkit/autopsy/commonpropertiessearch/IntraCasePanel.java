/*
 *
 * Autopsy Forensic Browser
 *
 * Copyright 2018-2019 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.commonpropertiessearch;

import org.sleuthkit.autopsy.guiutils.DataSourceComboBoxModel;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Observable;
import java.util.Observer;
import javax.swing.ComboBoxModel;

/**
 * UI controls for Common Files Search scenario where the user intends to find
 * common files between datasources. It is an inner panel which provides the
 * ability to select all datasources or a single datasource from a dropdown list
 * of sources in the current case.
 */
public final class IntraCasePanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;
    static final long NO_DATA_SOURCE_SELECTED = -1;
    private final Observable fileTypeFilterObservable;
    private ComboBoxModel<String> dataSourcesList = new DataSourceComboBoxModel();
    private final Map<Long, String> dataSourceMap;

    /**
     * Creates new form IntraCasePanel
     */
    public IntraCasePanel() {
        initComponents();
        this.dataSourceMap = new HashMap<>();
        this.onlySpecificDataSourceCheckbox.setEnabled(true);
        fileTypeFilterObservable = new Observable() {
            @Override
            public void notifyObservers() {
                //set changed before notify observers
                //we want this observerable to always cause the observer to update when notified
                this.setChanged();
                super.notifyObservers();
            }
        };
    }

    /**
     * Add an Observer to the Observable portion of this panel so that it can be
     * notified of changes to this panel.
     *
     * @param observer the object which is observing this panel
     */
    void addObserver(Observer observer) {
        fileTypeFilterObservable.addObserver(observer);
    }

    /**
     * Get the map of datasources which was used to populate the combo box on
     * this panel.
     *
     * @return an unmodifiable copy of the map of datasources
     */
    Map<Long, String> getDataSourceMap() {
        return Collections.unmodifiableMap(this.dataSourceMap);
    }

    /**
     * Get the ID for the datasource selected in the combo box.
     *
     * @return the selected datasource ID or
     *         IntraCasePanel.NO_DATA_SOURCE_SELECTED if none is selected
     */
    Long getSelectedDataSourceId() {
        if (onlySpecificDataSourceCheckbox.isSelected()) {
            for (Entry<Long, String> entry : this.dataSourceMap.entrySet()) {
                if (entry.getValue().equals(this.selectDataSourceComboBox.getSelectedItem())) {
                    return entry.getKey();
                }
            }
        }
        return IntraCasePanel.NO_DATA_SOURCE_SELECTED;
    }

    /**
     * If the user has selected to show only results of specific file types.
     *
     * @return if the selected file categories button is selected, true for
     *         selected false for not selected
     */
    boolean fileCategoriesButtonIsSelected() {
        return selectedFileCategoriesButton.isSelected();
    }

    /**
     * If the user has selected selected to show Picture and Video files as part
     * of the filtered results.
     *
     * @return if the pictures and video checkbox is enabled AND selected, true
     *         for enabled AND selected false for not selected OR not enabled
     */
    boolean pictureVideoCheckboxIsSelected() {
        return pictureVideoCheckbox.isEnabled() && pictureVideoCheckbox.isSelected();
    }

    /**
     * If the user has selected selected to show Document files as part of the
     * filtered results.
     *
     * @return if the documents checkbox is enabled AND selected, true for
     *         enabled AND selected false for not selected OR not enabled
     */
    boolean documentsCheckboxIsSelected() {
        return documentsCheckbox.isEnabled() && documentsCheckbox.isSelected();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        selectDataSourceComboBox = new javax.swing.JComboBox<>();
        categoriesLabel = new javax.swing.JLabel();
        selectedFileCategoriesButton = new javax.swing.JRadioButton();
        pictureVideoCheckbox = new javax.swing.JCheckBox();
        documentsCheckbox = new javax.swing.JCheckBox();
        allFileCategoriesRadioButton = new javax.swing.JRadioButton();
        onlySpecificDataSourceCheckbox = new javax.swing.JCheckBox();

        selectDataSourceComboBox.setModel(dataSourcesList);
        selectDataSourceComboBox.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(categoriesLabel, org.openide.util.NbBundle.getMessage(IntraCasePanel.class, "IntraCasePanel.categoriesLabel.text")); // NOI18N
        categoriesLabel.setName(""); // NOI18N

        buttonGroup.add(selectedFileCategoriesButton);
        selectedFileCategoriesButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(selectedFileCategoriesButton, org.openide.util.NbBundle.getMessage(IntraCasePanel.class, "IntraCasePanel.selectedFileCategoriesButton.text")); // NOI18N
        selectedFileCategoriesButton.setToolTipText(org.openide.util.NbBundle.getMessage(IntraCasePanel.class, "IntraCasePanel.selectedFileCategoriesButton.toolTipText")); // NOI18N
        selectedFileCategoriesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedFileCategoriesButtonActionPerformed(evt);
            }
        });

        pictureVideoCheckbox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(pictureVideoCheckbox, org.openide.util.NbBundle.getMessage(IntraCasePanel.class, "IntraCasePanel.pictureVideoCheckbox.text")); // NOI18N
        pictureVideoCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pictureVideoCheckboxActionPerformed(evt);
            }
        });

        documentsCheckbox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(documentsCheckbox, org.openide.util.NbBundle.getMessage(IntraCasePanel.class, "IntraCasePanel.documentsCheckbox.text")); // NOI18N
        documentsCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                documentsCheckboxActionPerformed(evt);
            }
        });

        buttonGroup.add(allFileCategoriesRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(allFileCategoriesRadioButton, org.openide.util.NbBundle.getMessage(IntraCasePanel.class, "IntraCasePanel.allFileCategoriesRadioButton.text")); // NOI18N
        allFileCategoriesRadioButton.setToolTipText(org.openide.util.NbBundle.getMessage(IntraCasePanel.class, "IntraCasePanel.allFileCategoriesRadioButton.toolTipText")); // NOI18N
        allFileCategoriesRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allFileCategoriesRadioButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(onlySpecificDataSourceCheckbox, org.openide.util.NbBundle.getMessage(IntraCasePanel.class, "IntraCasePanel.onlySpecificDataSourceCheckbox.text")); // NOI18N
        onlySpecificDataSourceCheckbox.setMaximumSize(new java.awt.Dimension(243, 23));
        onlySpecificDataSourceCheckbox.setMinimumSize(new java.awt.Dimension(243, 23));
        onlySpecificDataSourceCheckbox.setPreferredSize(new java.awt.Dimension(243, 23));
        onlySpecificDataSourceCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlySpecificDataSourceCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(selectDataSourceComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(categoriesLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(allFileCategoriesRadioButton)
                                    .addComponent(selectedFileCategoriesButton)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(documentsCheckbox)
                                            .addComponent(pictureVideoCheckbox))))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(onlySpecificDataSourceCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(onlySpecificDataSourceCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectDataSourceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(categoriesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(allFileCategoriesRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectedFileCategoriesButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pictureVideoCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(documentsCheckbox)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void selectedFileCategoriesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedFileCategoriesButtonActionPerformed
        //When the selectedFileCategoriesButton is selected enable its related options
        //and notify observers that the panel has changed incase the current settings are invalid
        pictureVideoCheckbox.setEnabled(true);
        documentsCheckbox.setEnabled(true);
        fileTypeFilterObservable.notifyObservers();
    }//GEN-LAST:event_selectedFileCategoriesButtonActionPerformed

    private void allFileCategoriesRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allFileCategoriesRadioButtonActionPerformed
        //When the allFileCategoriesRadioButton is selected disable the options 
        //related to selected file categories and notify observers that the panel has changed
        //incase the current settings are invalid
        pictureVideoCheckbox.setEnabled(false);
        documentsCheckbox.setEnabled(false);
        fileTypeFilterObservable.notifyObservers();
    }//GEN-LAST:event_allFileCategoriesRadioButtonActionPerformed

    private void onlySpecificDataSourceCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlySpecificDataSourceCheckboxActionPerformed
        //When the onlySpecificDataSourceCheckbox is clicked update its related options
        selectDataSourceComboBox.setEnabled(onlySpecificDataSourceCheckbox.isSelected());
        if (selectDataSourceComboBox.isEnabled()) {
            selectDataSourceComboBox.setSelectedIndex(0);
        }
    }//GEN-LAST:event_onlySpecificDataSourceCheckboxActionPerformed

    private void pictureVideoCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pictureVideoCheckboxActionPerformed
        //notify observers that the panel has changed incase the current settings are invalid
        fileTypeFilterObservable.notifyObservers();
    }//GEN-LAST:event_pictureVideoCheckboxActionPerformed

    private void documentsCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_documentsCheckboxActionPerformed
        //notify observers that the panel has changed incase the current settings are invalid
        fileTypeFilterObservable.notifyObservers();
    }//GEN-LAST:event_documentsCheckboxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton allFileCategoriesRadioButton;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JLabel categoriesLabel;
    private javax.swing.JCheckBox documentsCheckbox;
    private javax.swing.JCheckBox onlySpecificDataSourceCheckbox;
    private javax.swing.JCheckBox pictureVideoCheckbox;
    private javax.swing.JComboBox<String> selectDataSourceComboBox;
    private javax.swing.JRadioButton selectedFileCategoriesButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Set the datamodel for the combo box which displays the data sources in
     * the current case
     *
     * @param dataSourceComboBoxModel the DataSourceComboBoxModel to use
     */
    void setDatasourceComboboxModel(DataSourceComboBoxModel dataSourceComboBoxModel) {
        this.dataSourcesList = dataSourceComboBoxModel;
        this.selectDataSourceComboBox.setModel(dataSourcesList);
    }

    /**
     * Update the map of datasources that this panel allows the user to select
     * from
     *
     * @param dataSourceMap A map of datasources
     */
    void setDataSourceMap(Map<Long, String> dataSourceMap) {
        this.dataSourceMap.clear();
        this.dataSourceMap.putAll(dataSourceMap);
    }
}
