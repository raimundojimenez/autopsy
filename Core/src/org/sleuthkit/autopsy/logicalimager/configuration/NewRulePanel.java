/*
 * Autopsy
 *
 * Copyright 2019 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.logicalimager.configuration;

import java.awt.BorderLayout;
import java.io.IOException;
import java.util.logging.Level;
import javax.swing.JButton;
import javax.swing.JPanel;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.openide.util.NbBundle.Messages;
import org.sleuthkit.autopsy.coreutils.Logger;

/**
 * New rule set panel
 */
@SuppressWarnings("PMD.SingularField") // UI widgets cause lots of false positives
class NewRulePanel extends javax.swing.JPanel {

    private static final Logger logger = Logger.getLogger(NewRulePanel.class.getName());
    private final JPanel nonFullPathsJPanel;
    private final EditNonFullPathsRulePanel editNonFullPathsRulePanel;
    private final JPanel fullPathsPanel;
    private final EditFullPathsRulePanel editFullPathsRulePanel;

    /**
     * Creates new form NewRuleSetPanel
     */
    NewRulePanel(JButton okButton, JButton cancelButton) {
        initComponents();

        nonFullPathsJPanel = createPanel();
        editNonFullPathsRulePanel = new EditNonFullPathsRulePanel(okButton, cancelButton, "", new LogicalImagerRule(), false);
        nonFullPathsJPanel.add(editNonFullPathsRulePanel, BorderLayout.NORTH);

        fullPathsPanel = createPanel();
        editFullPathsRulePanel = new EditFullPathsRulePanel(okButton, cancelButton, "", new LogicalImagerRule(), false);
        fullPathsPanel.add(editFullPathsRulePanel, BorderLayout.NORTH);

        sharedLayeredPane.add(nonFullPathsJPanel, Integer.valueOf(0));
        sharedLayeredPane.add(fullPathsPanel, Integer.valueOf(1));
        nonFullPathsJPanel.setVisible(true);
        ruleDescription.setText(Bundle.NewRuleSetPanel_attributeRule_description());
        fullPathsPanel.setVisible(false);
    }

    private JPanel createPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setSize(800, 650);
        return panel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @Messages({"NewRuleSetPanel.attributeRule.name=Attribute",
        "NewRuleSetPanel.fullPathRule.name=Full Path",
        "NewRuleSetPanel.attributeRule.description=Search for files based on one or more attributes or metadata fields.",
        "NewRuleSetPanel.fullPathRule.description=Search for files based on full exact match path."})
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooseLabel = new javax.swing.JLabel();
        chooseComboBox = new javax.swing.JComboBox<>();
        sharedLayeredPane = new javax.swing.JLayeredPane();
        ruleDescription = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(chooseLabel, org.openide.util.NbBundle.getMessage(NewRulePanel.class, "NewRulePanel.chooseLabel.text")); // NOI18N

        chooseComboBox.setMaximumRowCount(2);
        chooseComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {Bundle.NewRuleSetPanel_attributeRule_name(), Bundle.NewRuleSetPanel_fullPathRule_name()}));
        chooseComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sharedLayeredPaneLayout = new javax.swing.GroupLayout(sharedLayeredPane);
        sharedLayeredPane.setLayout(sharedLayeredPaneLayout);
        sharedLayeredPaneLayout.setHorizontalGroup(
            sharedLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        sharedLayeredPaneLayout.setVerticalGroup(
            sharedLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 467, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chooseLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chooseComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ruleDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(114, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sharedLayeredPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chooseLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ruleDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sharedLayeredPane)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void chooseComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseComboBoxActionPerformed
        int index = chooseComboBox.getSelectedIndex();
        if (chooseComboBox.getItemAt(index).equals(Bundle.NewRuleSetPanel_attributeRule_name())) {
            nonFullPathsJPanel.setVisible(true);
            editNonFullPathsRulePanel.setOkButton();
            ruleDescription.setText(Bundle.NewRuleSetPanel_attributeRule_description());
            fullPathsPanel.setVisible(false);
        } else if (chooseComboBox.getItemAt(index).equals(Bundle.NewRuleSetPanel_fullPathRule_name())) {
            nonFullPathsJPanel.setVisible(false);
            ruleDescription.setText(Bundle.NewRuleSetPanel_fullPathRule_description());
            fullPathsPanel.setVisible(true);
            editFullPathsRulePanel.setOkButton();
        } else {
            logger.log(Level.WARNING, "Rule type selected was not one of the expected rule types");
            nonFullPathsJPanel.setVisible(false);
            fullPathsPanel.setVisible(false);
            ruleDescription.setText("");
        }

    }//GEN-LAST:event_chooseComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> chooseComboBox;
    private javax.swing.JLabel chooseLabel;
    private javax.swing.JLabel ruleDescription;
    private javax.swing.JLayeredPane sharedLayeredPane;
    // End of variables declaration//GEN-END:variables

    ImmutablePair<String, LogicalImagerRule> toRule() throws IOException, NumberFormatException {
        ImmutablePair<String, LogicalImagerRule> ruleMap;
        if (chooseComboBox.getSelectedIndex() == 0) {
            ruleMap = editNonFullPathsRulePanel.toRule();
        } else {
            ruleMap = editFullPathsRulePanel.toRule();
        }
        return ruleMap;
    }

}
